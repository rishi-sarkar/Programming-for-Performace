<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="110885058"><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="725" width="0.2601%" height="15" fill="rgb(227,0,7)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="735.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="709" width="0.2601%" height="15" fill="rgb(217,0,24)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="719.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="693" width="0.2601%" height="15" fill="rgb(221,193,54)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="703.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="677" width="0.2601%" height="15" fill="rgb(248,212,6)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="687.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="661" width="0.2601%" height="15" fill="rgb(208,68,35)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="671.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="645" width="0.2601%" height="15" fill="rgb(232,128,0)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="655.50"></text></g><g><title>[unknown] (288,400 samples, 0.26%)</title><rect x="5.2299%" y="629" width="0.2601%" height="15" fill="rgb(207,160,47)" fg:x="5799169" fg:w="288400"/><text x="5.4799%" y="639.50"></text></g><g><title>[unknown] (288,398 samples, 0.26%)</title><rect x="5.2299%" y="613" width="0.2601%" height="15" fill="rgb(228,23,34)" fg:x="5799171" fg:w="288398"/><text x="5.4799%" y="623.50"></text></g><g><title>[unknown] (288,398 samples, 0.26%)</title><rect x="5.2299%" y="597" width="0.2601%" height="15" fill="rgb(218,30,26)" fg:x="5799171" fg:w="288398"/><text x="5.4799%" y="607.50"></text></g><g><title>[unknown] (288,398 samples, 0.26%)</title><rect x="5.2299%" y="581" width="0.2601%" height="15" fill="rgb(220,122,19)" fg:x="5799171" fg:w="288398"/><text x="5.4799%" y="591.50"></text></g><g><title>__GI___clone (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="725" width="2.4095%" height="15" fill="rgb(250,228,42)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="735.50">__..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="709" width="2.4095%" height="15" fill="rgb(240,193,28)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="719.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="693" width="2.4095%" height="15" fill="rgb(216,20,37)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="703.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="677" width="2.4095%" height="15" fill="rgb(206,188,39)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="687.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="661" width="2.4095%" height="15" fill="rgb(217,207,13)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="671.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="645" width="2.4095%" height="15" fill="rgb(231,73,38)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="655.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="629" width="2.4095%" height="15" fill="rgb(225,20,46)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="639.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="613" width="2.4095%" height="15" fill="rgb(210,31,41)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="623.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="597" width="2.4095%" height="15" fill="rgb(221,200,47)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="607.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="581" width="2.4095%" height="15" fill="rgb(226,26,5)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="591.50">[u..</text></g><g><title>[unknown] (2,671,795 samples, 2.41%)</title><rect x="5.4900%" y="565" width="2.4095%" height="15" fill="rgb(249,33,26)" fg:x="6087569" fg:w="2671795"/><text x="5.7400%" y="575.50">[u..</text></g><g><title>[unknown] (9,386,029 samples, 8.46%)</title><rect x="0.0000%" y="741" width="8.4646%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="9386029"/><text x="0.2500%" y="751.50">[unknown]</text></g><g><title>__GI___get_nprocs (626,665 samples, 0.57%)</title><rect x="7.8995%" y="725" width="0.5651%" height="15" fill="rgb(221,5,38)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="735.50"></text></g><g><title>__GI___open64_nocancel (626,665 samples, 0.57%)</title><rect x="7.8995%" y="709" width="0.5651%" height="15" fill="rgb(247,18,42)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="719.50"></text></g><g><title>[unknown] (626,665 samples, 0.57%)</title><rect x="7.8995%" y="693" width="0.5651%" height="15" fill="rgb(241,131,45)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="703.50"></text></g><g><title>[unknown] (626,665 samples, 0.57%)</title><rect x="7.8995%" y="677" width="0.5651%" height="15" fill="rgb(249,31,29)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="687.50"></text></g><g><title>[unknown] (626,665 samples, 0.57%)</title><rect x="7.8995%" y="661" width="0.5651%" height="15" fill="rgb(225,111,53)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="671.50"></text></g><g><title>[unknown] (626,665 samples, 0.57%)</title><rect x="7.8995%" y="645" width="0.5651%" height="15" fill="rgb(238,160,17)" fg:x="8759364" fg:w="626665"/><text x="8.1495%" y="655.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="725" width="1.3659%" height="15" fill="rgb(214,148,48)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="735.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="709" width="1.3659%" height="15" fill="rgb(232,36,49)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="719.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="693" width="1.3659%" height="15" fill="rgb(209,103,24)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="703.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="677" width="1.3659%" height="15" fill="rgb(229,88,8)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="687.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="661" width="1.3659%" height="15" fill="rgb(213,181,19)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="671.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="645" width="1.3659%" height="15" fill="rgb(254,191,54)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="655.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="629" width="1.3659%" height="15" fill="rgb(241,83,37)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="639.50"></text></g><g><title>[unknown] (1,514,624 samples, 1.37%)</title><rect x="8.4646%" y="613" width="1.3659%" height="15" fill="rgb(233,36,39)" fg:x="9386029" fg:w="1514624"/><text x="8.7146%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (4,613,573 samples, 4.16%)</title><rect x="11.2508%" y="453" width="4.1607%" height="15" fill="rgb(226,3,54)" fg:x="12475429" fg:w="4613573"/><text x="11.5008%" y="463.50">core:..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4,613,573 samples, 4.16%)</title><rect x="11.2508%" y="437" width="4.1607%" height="15" fill="rgb(245,192,40)" fg:x="12475429" fg:w="4613573"/><text x="11.5008%" y="447.50">core:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (8,402,922 samples, 7.58%)</title><rect x="15.4115%" y="437" width="7.5780%" height="15" fill="rgb(238,167,29)" fg:x="17089002" fg:w="8402922"/><text x="15.6615%" y="447.50">core::iter..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (8,402,922 samples, 7.58%)</title><rect x="15.4115%" y="421" width="7.5780%" height="15" fill="rgb(232,182,51)" fg:x="17089002" fg:w="8402922"/><text x="15.6615%" y="431.50">&lt;core::ops..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (4,268,791 samples, 3.85%)</title><rect x="19.1398%" y="405" width="3.8497%" height="15" fill="rgb(231,60,39)" fg:x="21223133" fg:w="4268791"/><text x="19.3898%" y="415.50">core..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (22,926,507 samples, 20.68%)</title><rect x="11.2508%" y="501" width="20.6759%" height="15" fill="rgb(208,69,12)" fg:x="12475429" fg:w="22926507"/><text x="11.5008%" y="511.50">crossbeam_channel::channel::Sende..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (22,926,507 samples, 20.68%)</title><rect x="11.2508%" y="485" width="20.6759%" height="15" fill="rgb(235,93,37)" fg:x="12475429" fg:w="22926507"/><text x="11.5008%" y="495.50">crossbeam_channel::flavors::list:..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (22,926,507 samples, 20.68%)</title><rect x="11.2508%" y="469" width="20.6759%" height="15" fill="rgb(213,116,39)" fg:x="12475429" fg:w="22926507"/><text x="11.5008%" y="479.50">crossbeam_channel::flavors::list:..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (18,312,934 samples, 16.52%)</title><rect x="15.4115%" y="453" width="16.5152%" height="15" fill="rgb(222,207,29)" fg:x="17089002" fg:w="18312934"/><text x="15.6615%" y="463.50">crossbeam_utils::backoff:..</text></g><g><title>core::sync::atomic::spin_loop_hint (9,910,012 samples, 8.94%)</title><rect x="22.9895%" y="437" width="8.9372%" height="15" fill="rgb(206,96,30)" fg:x="25491924" fg:w="9910012"/><text x="23.2395%" y="447.50">core::sync::a..</text></g><g><title>core::hint::spin_loop (9,910,012 samples, 8.94%)</title><rect x="22.9895%" y="421" width="8.9372%" height="15" fill="rgb(218,138,4)" fg:x="25491924" fg:w="9910012"/><text x="23.2395%" y="431.50">core::hint::s..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (9,910,012 samples, 8.94%)</title><rect x="22.9895%" y="405" width="8.9372%" height="15" fill="rgb(250,191,14)" fg:x="25491924" fg:w="9910012"/><text x="23.2395%" y="415.50">core::core_ar..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="501" width="4.0349%" height="15" fill="rgb(239,60,40)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="511.50">lab4..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="485" width="4.0349%" height="15" fill="rgb(206,27,48)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="495.50">&lt;D a..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="469" width="4.0349%" height="15" fill="rgb(225,35,8)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="479.50">dige..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="453" width="4.0349%" height="15" fill="rgb(250,213,24)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="463.50">&lt;D a..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="437" width="4.0349%" height="15" fill="rgb(247,123,22)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="447.50">&lt;sha..</text></g><g><title>sha2::sha256::Engine256::finish (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="421" width="4.0349%" height="15" fill="rgb(231,138,38)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="431.50">sha2..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="405" width="4.0349%" height="15" fill="rgb(231,145,46)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="415.50">bloc..</text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="389" width="4.0349%" height="15" fill="rgb(251,118,11)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="399.50">sha2..</text></g><g><title>sha2::sha256::compress256 (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="373" width="4.0349%" height="15" fill="rgb(217,147,25)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="383.50">sha2..</text></g><g><title>sha2::sha256::x86::compress (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="357" width="4.0349%" height="15" fill="rgb(247,81,37)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="367.50">sha2..</text></g><g><title>sha2::sha256::soft::compress (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="341" width="4.0349%" height="15" fill="rgb(209,12,38)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="351.50">sha2..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="325" width="4.0349%" height="15" fill="rgb(227,1,9)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="335.50">sha2..</text></g><g><title>sha2::sha256::soft::schedule (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="309" width="4.0349%" height="15" fill="rgb(248,47,43)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="319.50">sha2..</text></g><g><title>sha2::sha256::soft::sha256msg2 (4,474,124 samples, 4.03%)</title><rect x="31.9267%" y="293" width="4.0349%" height="15" fill="rgb(221,10,30)" fg:x="35401936" fg:w="4474124"/><text x="32.1767%" y="303.50">sha2..</text></g><g><title>lab4::package::PackageDownloader::run (29,304,141 samples, 26.43%)</title><rect x="11.2508%" y="517" width="26.4275%" height="15" fill="rgb(210,229,1)" fg:x="12475429" fg:w="29304141"/><text x="11.5008%" y="527.50">lab4::package::PackageDownloader::run</text></g><g><title>std::fs::read_to_string (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="501" width="1.7167%" height="15" fill="rgb(222,148,37)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="511.50"></text></g><g><title>std::fs::read_to_string::inner (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="485" width="1.7167%" height="15" fill="rgb(234,67,33)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="495.50"></text></g><g><title>std::fs::File::open (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="469" width="1.7167%" height="15" fill="rgb(247,98,35)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="479.50"></text></g><g><title>std::fs::OpenOptions::open (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="453" width="1.7167%" height="15" fill="rgb(247,138,52)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="463.50"></text></g><g><title>std::fs::OpenOptions::_open (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="437" width="1.7167%" height="15" fill="rgb(213,79,30)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="447.50"></text></g><g><title>std::sys::pal::unix::fs::File::open (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="421" width="1.7167%" height="15" fill="rgb(246,177,23)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="431.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="405" width="1.7167%" height="15" fill="rgb(230,62,27)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="415.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="389" width="1.7167%" height="15" fill="rgb(216,154,8)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="399.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="373" width="1.7167%" height="15" fill="rgb(244,35,45)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="383.50"></text></g><g><title>std::sys::pal::unix::fs::File::open::{{closure}} (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="357" width="1.7167%" height="15" fill="rgb(251,115,12)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="367.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="341" width="1.7167%" height="15" fill="rgb(240,54,50)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="351.50"></text></g><g><title>std::sys::pal::unix::cvt_r (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="325" width="1.7167%" height="15" fill="rgb(233,84,52)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="335.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c::{{closure}} (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="309" width="1.7167%" height="15" fill="rgb(207,117,47)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="319.50"></text></g><g><title>__libc_open64 (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="293" width="1.7167%" height="15" fill="rgb(249,43,39)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="303.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="277" width="1.7167%" height="15" fill="rgb(209,38,44)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="287.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="261" width="1.7167%" height="15" fill="rgb(236,212,23)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="271.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="245" width="1.7167%" height="15" fill="rgb(242,79,21)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="255.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="229" width="1.7167%" height="15" fill="rgb(211,96,35)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="239.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="213" width="1.7167%" height="15" fill="rgb(253,215,40)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="223.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="197" width="1.7167%" height="15" fill="rgb(211,81,21)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="207.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="181" width="1.7167%" height="15" fill="rgb(208,190,38)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="191.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="165" width="1.7167%" height="15" fill="rgb(235,213,38)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="175.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="149" width="1.7167%" height="15" fill="rgb(237,122,38)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="159.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="133" width="1.7167%" height="15" fill="rgb(244,218,35)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="143.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="117" width="1.7167%" height="15" fill="rgb(240,68,47)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="127.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="101" width="1.7167%" height="15" fill="rgb(210,16,53)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="111.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="85" width="1.7167%" height="15" fill="rgb(235,124,12)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="95.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="69" width="1.7167%" height="15" fill="rgb(224,169,11)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="79.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="53" width="1.7167%" height="15" fill="rgb(250,166,2)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="63.50"></text></g><g><title>[unknown] (1,903,510 samples, 1.72%)</title><rect x="35.9616%" y="37" width="1.7167%" height="15" fill="rgb(242,216,29)" fg:x="39876060" fg:w="1903510"/><text x="36.2116%" y="47.50"></text></g><g><title>crossbeam_channel::context::Context::with (267,753 samples, 0.24%)</title><rect x="37.6783%" y="469" width="0.2415%" height="15" fill="rgb(230,116,27)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (267,753 samples, 0.24%)</title><rect x="37.6783%" y="453" width="0.2415%" height="15" fill="rgb(228,99,48)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="463.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (267,753 samples, 0.24%)</title><rect x="37.6783%" y="437" width="0.2415%" height="15" fill="rgb(253,11,6)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="447.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (267,753 samples, 0.24%)</title><rect x="37.6783%" y="421" width="0.2415%" height="15" fill="rgb(247,143,39)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (267,753 samples, 0.24%)</title><rect x="37.6783%" y="405" width="0.2415%" height="15" fill="rgb(236,97,10)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="415.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (267,753 samples, 0.24%)</title><rect x="37.6783%" y="389" width="0.2415%" height="15" fill="rgb(233,208,19)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="399.50"></text></g><g><title>std::thread::park (267,753 samples, 0.24%)</title><rect x="37.6783%" y="373" width="0.2415%" height="15" fill="rgb(216,164,2)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="383.50"></text></g><g><title>std::thread::Thread::park (267,753 samples, 0.24%)</title><rect x="37.6783%" y="357" width="0.2415%" height="15" fill="rgb(220,129,5)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="367.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (267,753 samples, 0.24%)</title><rect x="37.6783%" y="341" width="0.2415%" height="15" fill="rgb(242,17,10)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="351.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (267,753 samples, 0.24%)</title><rect x="37.6783%" y="325" width="0.2415%" height="15" fill="rgb(242,107,0)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="335.50"></text></g><g><title>syscall (267,753 samples, 0.24%)</title><rect x="37.6783%" y="309" width="0.2415%" height="15" fill="rgb(251,28,31)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="319.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="293" width="0.2415%" height="15" fill="rgb(233,223,10)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="303.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="277" width="0.2415%" height="15" fill="rgb(215,21,27)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="287.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="261" width="0.2415%" height="15" fill="rgb(232,23,21)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="271.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="245" width="0.2415%" height="15" fill="rgb(244,5,23)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="255.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="229" width="0.2415%" height="15" fill="rgb(226,81,46)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="239.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="213" width="0.2415%" height="15" fill="rgb(247,70,30)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="223.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="197" width="0.2415%" height="15" fill="rgb(212,68,19)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="207.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="181" width="0.2415%" height="15" fill="rgb(240,187,13)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="191.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="165" width="0.2415%" height="15" fill="rgb(223,113,26)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="175.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="149" width="0.2415%" height="15" fill="rgb(206,192,2)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="159.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="133" width="0.2415%" height="15" fill="rgb(241,108,4)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="143.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="117" width="0.2415%" height="15" fill="rgb(247,173,49)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="127.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="101" width="0.2415%" height="15" fill="rgb(224,114,35)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="111.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="85" width="0.2415%" height="15" fill="rgb(245,159,27)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="95.50"></text></g><g><title>[unknown] (267,753 samples, 0.24%)</title><rect x="37.6783%" y="69" width="0.2415%" height="15" fill="rgb(245,172,44)" fg:x="41779570" fg:w="267753"/><text x="37.9283%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4,586,691 samples, 4.14%)</title><rect x="37.9197%" y="453" width="4.1364%" height="15" fill="rgb(236,23,11)" fg:x="42047323" fg:w="4586691"/><text x="38.1697%" y="463.50">core:..</text></g><g><title>core::sync::atomic::atomic_load (4,586,691 samples, 4.14%)</title><rect x="37.9197%" y="437" width="4.1364%" height="15" fill="rgb(205,117,38)" fg:x="42047323" fg:w="4586691"/><text x="38.1697%" y="447.50">core:..</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (386,283 samples, 0.35%)</title><rect x="42.0562%" y="453" width="0.3484%" height="15" fill="rgb(237,72,25)" fg:x="46634014" fg:w="386283"/><text x="42.3062%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (386,283 samples, 0.35%)</title><rect x="42.0562%" y="437" width="0.3484%" height="15" fill="rgb(244,70,9)" fg:x="46634014" fg:w="386283"/><text x="42.3062%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2,827,885 samples, 2.55%)</title><rect x="42.4045%" y="453" width="2.5503%" height="15" fill="rgb(217,125,39)" fg:x="47020297" fg:w="2827885"/><text x="42.6545%" y="463.50">co..</text></g><g><title>core::sync::atomic::atomic_load (2,827,885 samples, 2.55%)</title><rect x="42.4045%" y="437" width="2.5503%" height="15" fill="rgb(235,36,10)" fg:x="47020297" fg:w="2827885"/><text x="42.6545%" y="447.50">co..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5,753,851 samples, 5.19%)</title><rect x="44.9548%" y="437" width="5.1890%" height="15" fill="rgb(251,123,47)" fg:x="49848182" fg:w="5753851"/><text x="45.2048%" y="447.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5,753,851 samples, 5.19%)</title><rect x="44.9548%" y="421" width="5.1890%" height="15" fill="rgb(221,13,13)" fg:x="49848182" fg:w="5753851"/><text x="45.2048%" y="431.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (5,753,851 samples, 5.19%)</title><rect x="44.9548%" y="405" width="5.1890%" height="15" fill="rgb(238,131,9)" fg:x="49848182" fg:w="5753851"/><text x="45.2048%" y="415.50">core::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (27,591,033 samples, 24.88%)</title><rect x="37.9197%" y="469" width="24.8826%" height="15" fill="rgb(211,50,8)" fg:x="42047323" fg:w="27591033"/><text x="38.1697%" y="479.50">crossbeam_channel::flavors::list::Channe..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (19,790,174 samples, 17.85%)</title><rect x="44.9548%" y="453" width="17.8475%" height="15" fill="rgb(245,182,24)" fg:x="49848182" fg:w="19790174"/><text x="45.2048%" y="463.50">crossbeam_utils::backoff::Ba..</text></g><g><title>core::sync::atomic::spin_loop_hint (14,036,323 samples, 12.66%)</title><rect x="50.1438%" y="437" width="12.6584%" height="15" fill="rgb(242,14,37)" fg:x="55602033" fg:w="14036323"/><text x="50.3938%" y="447.50">core::sync::atomic:..</text></g><g><title>core::hint::spin_loop (14,036,323 samples, 12.66%)</title><rect x="50.1438%" y="421" width="12.6584%" height="15" fill="rgb(246,228,12)" fg:x="55602033" fg:w="14036323"/><text x="50.3938%" y="431.50">core::hint::spin_lo..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (14,036,323 samples, 12.66%)</title><rect x="50.1438%" y="405" width="12.6584%" height="15" fill="rgb(213,55,15)" fg:x="55602033" fg:w="14036323"/><text x="50.3938%" y="415.50">core::core_arch::x8..</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (34,160,845 samples, 30.81%)</title><rect x="37.6783%" y="501" width="30.8074%" height="15" fill="rgb(209,9,3)" fg:x="41779570" fg:w="34160845"/><text x="37.9283%" y="511.50">crossbeam_channel::channel::Receiver&lt;T&gt;::recv</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (34,160,845 samples, 30.81%)</title><rect x="37.6783%" y="485" width="30.8074%" height="15" fill="rgb(230,59,30)" fg:x="41779570" fg:w="34160845"/><text x="37.9283%" y="495.50">crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (6,302,059 samples, 5.68%)</title><rect x="62.8023%" y="469" width="5.6834%" height="15" fill="rgb(209,121,21)" fg:x="69638356" fg:w="6302059"/><text x="63.0523%" y="479.50">crossbe..</text></g><g><title>core::sync::atomic::spin_loop_hint (6,302,059 samples, 5.68%)</title><rect x="62.8023%" y="453" width="5.6834%" height="15" fill="rgb(220,109,13)" fg:x="69638356" fg:w="6302059"/><text x="63.0523%" y="463.50">core::s..</text></g><g><title>core::hint::spin_loop (6,302,059 samples, 5.68%)</title><rect x="62.8023%" y="437" width="5.6834%" height="15" fill="rgb(232,18,1)" fg:x="69638356" fg:w="6302059"/><text x="63.0523%" y="447.50">core::h..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (6,302,059 samples, 5.68%)</title><rect x="62.8023%" y="421" width="5.6834%" height="15" fill="rgb(215,41,42)" fg:x="69638356" fg:w="6302059"/><text x="63.0523%" y="431.50">core::c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;lab4::package::Package&gt;&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="485" width="4.6002%" height="15" fill="rgb(224,123,36)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="495.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="469" width="4.6002%" height="15" fill="rgb(240,125,3)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="479.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;[lab4::package::Package]&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="453" width="4.6002%" height="15" fill="rgb(205,98,50)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="463.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;lab4::package::Package&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="437" width="4.6002%" height="15" fill="rgb(205,185,37)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="447.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="421" width="4.6002%" height="15" fill="rgb(238,207,15)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="431.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="405" width="4.6002%" height="15" fill="rgb(213,199,42)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="415.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="389" width="4.6002%" height="15" fill="rgb(235,201,11)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="399.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="373" width="4.6002%" height="15" fill="rgb(207,46,11)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="383.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="357" width="4.6002%" height="15" fill="rgb(241,35,35)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="367.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="341" width="4.6002%" height="15" fill="rgb(243,32,47)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="351.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="325" width="4.6002%" height="15" fill="rgb(247,202,23)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="335.50">alloc..</text></g><g><title>__GI___libc_free (5,100,967 samples, 4.60%)</title><rect x="68.4857%" y="309" width="4.6002%" height="15" fill="rgb(219,102,11)" fg:x="75940415" fg:w="5100967"/><text x="68.7357%" y="319.50">__GI_..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (79,373,037 samples, 71.58%)</title><rect x="9.8306%" y="693" width="71.5814%" height="15" fill="rgb(243,110,44)" fg:x="10900653" fg:w="79373037"/><text x="10.0806%" y="703.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="677" width="70.1612%" height="15" fill="rgb(222,74,54)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="661" width="70.1612%" height="15" fill="rgb(216,99,12)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="671.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="645" width="70.1612%" height="15" fill="rgb(226,22,26)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="655.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="629" width="70.1612%" height="15" fill="rgb(217,163,10)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="613" width="70.1612%" height="15" fill="rgb(213,25,53)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="597" width="70.1612%" height="15" fill="rgb(252,105,26)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="607.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="581" width="70.1612%" height="15" fill="rgb(220,39,43)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="591.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="565" width="70.1612%" height="15" fill="rgb(229,68,48)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="575.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="549" width="70.1612%" height="15" fill="rgb(252,8,32)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="559.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::run_hackathon::{{closure}} (77,798,261 samples, 70.16%)</title><rect x="11.2508%" y="533" width="70.1612%" height="15" fill="rgb(223,20,43)" fg:x="12475429" fg:w="77798261"/><text x="11.5008%" y="543.50">lab4::run_hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (48,494,120 samples, 43.73%)</title><rect x="37.6783%" y="517" width="43.7337%" height="15" fill="rgb(229,81,49)" fg:x="41779570" fg:w="48494120"/><text x="37.9283%" y="527.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (14,333,275 samples, 12.93%)</title><rect x="68.4857%" y="501" width="12.9262%" height="15" fill="rgb(236,28,36)" fg:x="75940415" fg:w="14333275"/><text x="68.7357%" y="511.50">lab4::student::Stud..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="485" width="8.3260%" height="15" fill="rgb(249,185,26)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="495.50">lab4::checks..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="469" width="8.3260%" height="15" fill="rgb(249,174,33)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="479.50">&lt;D as digest..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="453" width="8.3260%" height="15" fill="rgb(233,201,37)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="463.50">digest::fixe..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="437" width="8.3260%" height="15" fill="rgb(221,78,26)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="447.50">&lt;D as digest..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="421" width="8.3260%" height="15" fill="rgb(250,127,30)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="431.50">&lt;sha2::sha25..</text></g><g><title>sha2::sha256::Engine256::finish (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="405" width="8.3260%" height="15" fill="rgb(230,49,44)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="415.50">sha2::sha256..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="389" width="8.3260%" height="15" fill="rgb(229,67,23)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="399.50">block_buffer..</text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="373" width="8.3260%" height="15" fill="rgb(249,83,47)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="383.50">sha2::sha256..</text></g><g><title>sha2::sha256::compress256 (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="357" width="8.3260%" height="15" fill="rgb(215,43,3)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="367.50">sha2::sha256..</text></g><g><title>sha2::sha256::x86::compress (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="341" width="8.3260%" height="15" fill="rgb(238,154,13)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="351.50">sha2::sha256..</text></g><g><title>sha2::sha256::soft::compress (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="325" width="8.3260%" height="15" fill="rgb(219,56,2)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="335.50">sha2::sha256..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="309" width="8.3260%" height="15" fill="rgb(233,0,4)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="319.50">sha2::sha256..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (9,232,308 samples, 8.33%)</title><rect x="73.0859%" y="293" width="8.3260%" height="15" fill="rgb(235,30,7)" fg:x="81041382" fg:w="9232308"/><text x="73.3359%" y="303.50">sha2::sha256..</text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="565" width="0.9327%" height="15" fill="rgb(250,79,13)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="575.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="549" width="0.9327%" height="15" fill="rgb(211,146,34)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="559.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="533" width="0.9327%" height="15" fill="rgb(228,22,38)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="543.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="517" width="0.9327%" height="15" fill="rgb(235,168,5)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="527.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="501" width="0.9327%" height="15" fill="rgb(221,155,16)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="511.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="485" width="0.9327%" height="15" fill="rgb(215,215,53)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="495.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="469" width="0.9327%" height="15" fill="rgb(223,4,10)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="479.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="453" width="0.9327%" height="15" fill="rgb(234,103,6)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="463.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="437" width="0.9327%" height="15" fill="rgb(227,97,0)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="447.50"></text></g><g><title>[unknown] (1,034,273 samples, 0.93%)</title><rect x="82.3426%" y="421" width="0.9327%" height="15" fill="rgb(234,150,53)" fg:x="91305656" fg:w="1034273"/><text x="82.5926%" y="431.50"></text></g><g><title>__GI___mmap64 (982,649 samples, 0.89%)</title><rect x="83.2754%" y="565" width="0.8862%" height="15" fill="rgb(228,201,54)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="575.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="549" width="0.8862%" height="15" fill="rgb(222,22,37)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="559.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="533" width="0.8862%" height="15" fill="rgb(237,53,32)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="543.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="517" width="0.8862%" height="15" fill="rgb(233,25,53)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="527.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="501" width="0.8862%" height="15" fill="rgb(210,40,34)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="511.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="485" width="0.8862%" height="15" fill="rgb(241,220,44)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="495.50"></text></g><g><title>[unknown] (982,649 samples, 0.89%)</title><rect x="83.2754%" y="469" width="0.8862%" height="15" fill="rgb(235,28,35)" fg:x="92339929" fg:w="982649"/><text x="83.5254%" y="479.50"></text></g><g><title>[unknown] (541,614 samples, 0.49%)</title><rect x="83.6731%" y="453" width="0.4884%" height="15" fill="rgb(210,56,17)" fg:x="92780964" fg:w="541614"/><text x="83.9231%" y="463.50"></text></g><g><title>[unknown] (541,614 samples, 0.49%)</title><rect x="83.6731%" y="437" width="0.4884%" height="15" fill="rgb(224,130,29)" fg:x="92780964" fg:w="541614"/><text x="83.9231%" y="447.50"></text></g><g><title>[unknown] (541,614 samples, 0.49%)</title><rect x="83.6731%" y="421" width="0.4884%" height="15" fill="rgb(235,212,8)" fg:x="92780964" fg:w="541614"/><text x="83.9231%" y="431.50"></text></g><g><title>[unknown] (541,614 samples, 0.49%)</title><rect x="83.6731%" y="405" width="0.4884%" height="15" fill="rgb(223,33,50)" fg:x="92780964" fg:w="541614"/><text x="83.9231%" y="415.50"></text></g><g><title>__GI___libc_malloc (6,236,926 samples, 5.62%)</title><rect x="81.4120%" y="629" width="5.6247%" height="15" fill="rgb(219,149,13)" fg:x="90273690" fg:w="6236926"/><text x="81.6620%" y="639.50">__GI___..</text></g><g><title>tcache_init.part.0 (6,236,926 samples, 5.62%)</title><rect x="81.4120%" y="613" width="5.6247%" height="15" fill="rgb(250,156,29)" fg:x="90273690" fg:w="6236926"/><text x="81.6620%" y="623.50">tcache_..</text></g><g><title>arena_get2.part.0 (5,204,960 samples, 4.69%)</title><rect x="82.3426%" y="597" width="4.6940%" height="15" fill="rgb(216,193,19)" fg:x="91305656" fg:w="5204960"/><text x="82.5926%" y="607.50">arena..</text></g><g><title>new_heap (5,204,960 samples, 4.69%)</title><rect x="82.3426%" y="581" width="4.6940%" height="15" fill="rgb(216,135,14)" fg:x="91305656" fg:w="5204960"/><text x="82.5926%" y="591.50">new_h..</text></g><g><title>__GI___mprotect (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="565" width="2.8751%" height="15" fill="rgb(241,47,5)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="575.50">__..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="549" width="2.8751%" height="15" fill="rgb(233,42,35)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="559.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="533" width="2.8751%" height="15" fill="rgb(231,13,6)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="543.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="517" width="2.8751%" height="15" fill="rgb(207,181,40)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="527.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="501" width="2.8751%" height="15" fill="rgb(254,173,49)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="511.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="485" width="2.8751%" height="15" fill="rgb(221,1,38)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="495.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="469" width="2.8751%" height="15" fill="rgb(206,124,46)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="479.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="453" width="2.8751%" height="15" fill="rgb(249,21,11)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="463.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="437" width="2.8751%" height="15" fill="rgb(222,201,40)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="447.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="421" width="2.8751%" height="15" fill="rgb(235,61,29)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="431.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="405" width="2.8751%" height="15" fill="rgb(219,207,3)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="415.50">[u..</text></g><g><title>[unknown] (3,188,038 samples, 2.88%)</title><rect x="84.1615%" y="389" width="2.8751%" height="15" fill="rgb(222,56,46)" fg:x="93322578" fg:w="3188038"/><text x="84.4115%" y="399.50">[u..</text></g><g><title>[unknown] (1,365,173 samples, 1.23%)</title><rect x="85.8055%" y="373" width="1.2312%" height="15" fill="rgb(239,76,54)" fg:x="95145443" fg:w="1365173"/><text x="86.0555%" y="383.50"></text></g><g><title>[unknown] (1,365,173 samples, 1.23%)</title><rect x="85.8055%" y="357" width="1.2312%" height="15" fill="rgb(231,124,27)" fg:x="95145443" fg:w="1365173"/><text x="86.0555%" y="367.50"></text></g><g><title>[unknown] (1,365,173 samples, 1.23%)</title><rect x="85.8055%" y="341" width="1.2312%" height="15" fill="rgb(249,195,6)" fg:x="95145443" fg:w="1365173"/><text x="86.0555%" y="351.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (7,401,789 samples, 6.68%)</title><rect x="81.4120%" y="661" width="6.6752%" height="15" fill="rgb(237,174,47)" fg:x="90273690" fg:w="7401789"/><text x="81.6620%" y="671.50">std::sys:..</text></g><g><title>pthread_getattr_np (7,401,789 samples, 6.68%)</title><rect x="81.4120%" y="645" width="6.6752%" height="15" fill="rgb(206,201,31)" fg:x="90273690" fg:w="7401789"/><text x="81.6620%" y="655.50">pthread_g..</text></g><g><title>__pthread_getaffinity_new (1,164,863 samples, 1.05%)</title><rect x="87.0366%" y="629" width="1.0505%" height="15" fill="rgb(231,57,52)" fg:x="96510616" fg:w="1164863"/><text x="87.2866%" y="639.50"></text></g><g><title>[unknown] (1,164,863 samples, 1.05%)</title><rect x="87.0366%" y="613" width="1.0505%" height="15" fill="rgb(248,177,22)" fg:x="96510616" fg:w="1164863"/><text x="87.2866%" y="623.50"></text></g><g><title>__GI___mmap64 (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="645" width="3.2999%" height="15" fill="rgb(215,211,37)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="655.50">__G..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="629" width="3.2999%" height="15" fill="rgb(241,128,51)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="639.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="613" width="3.2999%" height="15" fill="rgb(227,165,31)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="623.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="597" width="3.2999%" height="15" fill="rgb(228,167,24)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="607.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="581" width="3.2999%" height="15" fill="rgb(228,143,12)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="591.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="565" width="3.2999%" height="15" fill="rgb(249,149,8)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="575.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="549" width="3.2999%" height="15" fill="rgb(243,35,44)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="559.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="533" width="3.2999%" height="15" fill="rgb(246,89,9)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="543.50">[un..</text></g><g><title>[unknown] (3,659,062 samples, 3.30%)</title><rect x="88.0871%" y="517" width="3.2999%" height="15" fill="rgb(233,213,13)" fg:x="97675479" fg:w="3659062"/><text x="88.3371%" y="527.50">[un..</text></g><g><title>__GI___clone (96,010,010 samples, 86.59%)</title><rect x="8.4646%" y="741" width="86.5852%" height="15" fill="rgb(233,141,41)" fg:x="9386029" fg:w="96010010"/><text x="8.7146%" y="751.50">__GI___clone</text></g><g><title>start_thread (94,495,386 samples, 85.22%)</title><rect x="9.8306%" y="725" width="85.2192%" height="15" fill="rgb(239,167,4)" fg:x="10900653" fg:w="94495386"/><text x="10.0806%" y="735.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (94,495,386 samples, 85.22%)</title><rect x="9.8306%" y="709" width="85.2192%" height="15" fill="rgb(209,217,16)" fg:x="10900653" fg:w="94495386"/><text x="10.0806%" y="719.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (15,122,349 samples, 13.64%)</title><rect x="81.4120%" y="693" width="13.6379%" height="15" fill="rgb(219,88,35)" fg:x="90273690" fg:w="15122349"/><text x="81.6620%" y="703.50">std::sys::pal::unix::..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (15,122,349 samples, 13.64%)</title><rect x="81.4120%" y="677" width="13.6379%" height="15" fill="rgb(220,193,23)" fg:x="90273690" fg:w="15122349"/><text x="81.6620%" y="687.50">std::sys::pal::unix::..</text></g><g><title>std::sys::pal::unix::stack_overflow::imp::get_stack (7,720,560 samples, 6.96%)</title><rect x="88.0871%" y="661" width="6.9627%" height="15" fill="rgb(230,90,52)" fg:x="97675479" fg:w="7720560"/><text x="88.3371%" y="671.50">std::sys:..</text></g><g><title>__GI___mprotect (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="645" width="3.6628%" height="15" fill="rgb(252,106,19)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="655.50">__GI..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="629" width="3.6628%" height="15" fill="rgb(206,74,20)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="639.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="613" width="3.6628%" height="15" fill="rgb(230,138,44)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="623.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="597" width="3.6628%" height="15" fill="rgb(235,182,43)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="607.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="581" width="3.6628%" height="15" fill="rgb(242,16,51)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="591.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="565" width="3.6628%" height="15" fill="rgb(248,9,4)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="575.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="549" width="3.6628%" height="15" fill="rgb(210,31,22)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="559.50">[unk..</text></g><g><title>[unknown] (4,061,498 samples, 3.66%)</title><rect x="91.3870%" y="533" width="3.6628%" height="15" fill="rgb(239,54,39)" fg:x="101334541" fg:w="4061498"/><text x="91.6370%" y="543.50">[unk..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="725" width="2.3012%" height="15" fill="rgb(230,99,41)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="735.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="709" width="2.3012%" height="15" fill="rgb(253,106,12)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="719.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="693" width="2.3012%" height="15" fill="rgb(213,46,41)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="703.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="677" width="2.3012%" height="15" fill="rgb(215,133,35)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="687.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="661" width="2.3012%" height="15" fill="rgb(213,28,5)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="671.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="645" width="2.3012%" height="15" fill="rgb(215,77,49)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="655.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="629" width="2.3012%" height="15" fill="rgb(248,100,22)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="639.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="613" width="2.3012%" height="15" fill="rgb(208,67,9)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="623.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="597" width="2.3012%" height="15" fill="rgb(219,133,21)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="607.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="581" width="2.3012%" height="15" fill="rgb(246,46,29)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="591.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="565" width="2.3012%" height="15" fill="rgb(246,185,52)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="575.50">[..</text></g><g><title>[unknown] (2,551,733 samples, 2.30%)</title><rect x="95.0498%" y="549" width="2.3012%" height="15" fill="rgb(252,136,11)" fg:x="105396039" fg:w="2551733"/><text x="95.2998%" y="559.50">[..</text></g><g><title>lab4 (110,863,646 samples, 99.98%)</title><rect x="0.0000%" y="757" width="99.9807%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="110863646"/><text x="0.2500%" y="767.50">lab4</text></g><g><title>_start (5,467,607 samples, 4.93%)</title><rect x="95.0498%" y="741" width="4.9309%" height="15" fill="rgb(211,51,23)" fg:x="105396039" fg:w="5467607"/><text x="95.2998%" y="751.50">_start</text></g><g><title>__libc_start_main (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="725" width="2.6296%" height="15" fill="rgb(247,221,28)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="735.50">__..</text></g><g><title>main (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="709" width="2.6296%" height="15" fill="rgb(251,222,45)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="719.50">ma..</text></g><g><title>std::rt::lang_start_internal (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="693" width="2.6296%" height="15" fill="rgb(217,162,53)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="703.50">st..</text></g><g><title>std::panic::catch_unwind (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="677" width="2.6296%" height="15" fill="rgb(229,93,14)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="687.50">st..</text></g><g><title>std::panicking::try (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="661" width="2.6296%" height="15" fill="rgb(209,67,49)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="671.50">st..</text></g><g><title>std::panicking::try::do_call (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="645" width="2.6296%" height="15" fill="rgb(213,87,29)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="655.50">st..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="629" width="2.6296%" height="15" fill="rgb(205,151,52)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="639.50">st..</text></g><g><title>std::panic::catch_unwind (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="613" width="2.6296%" height="15" fill="rgb(253,215,39)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="623.50">st..</text></g><g><title>std::panicking::try (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="597" width="2.6296%" height="15" fill="rgb(221,220,41)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="607.50">st..</text></g><g><title>std::panicking::try::do_call (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="581" width="2.6296%" height="15" fill="rgb(218,133,21)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="591.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="565" width="2.6296%" height="15" fill="rgb(221,193,43)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="575.50">co..</text></g><g><title>std::rt::lang_start::{{closure}} (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="549" width="2.6296%" height="15" fill="rgb(240,128,52)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="559.50">st..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="533" width="2.6296%" height="15" fill="rgb(253,114,12)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="543.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="517" width="2.6296%" height="15" fill="rgb(215,223,47)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="527.50">co..</text></g><g><title>lab4::main (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="501" width="2.6296%" height="15" fill="rgb(248,225,23)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="511.50">la..</text></g><g><title>lab4::run_hackathon (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="485" width="2.6296%" height="15" fill="rgb(250,108,0)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="495.50">la..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="469" width="2.6296%" height="15" fill="rgb(228,208,7)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="479.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="453" width="2.6296%" height="15" fill="rgb(244,45,10)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="463.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="437" width="2.6296%" height="15" fill="rgb(207,125,25)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="447.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="421" width="2.6296%" height="15" fill="rgb(210,195,18)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="431.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="405" width="2.6296%" height="15" fill="rgb(249,80,12)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="415.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="389" width="2.6296%" height="15" fill="rgb(221,65,9)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="399.50">al..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="373" width="2.6296%" height="15" fill="rgb(235,49,36)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="383.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="357" width="2.6296%" height="15" fill="rgb(225,32,20)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="367.50">&lt;c..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="341" width="2.6296%" height="15" fill="rgb(215,141,46)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="351.50">co..</text></g><g><title>core::ops::function::FnOnce::call_once (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="325" width="2.6296%" height="15" fill="rgb(250,160,47)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="335.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="309" width="2.6296%" height="15" fill="rgb(216,222,40)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="319.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="293" width="2.6296%" height="15" fill="rgb(234,217,39)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="303.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="277" width="2.6296%" height="15" fill="rgb(207,178,40)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="287.50">co..</text></g><g><title>lab4::run_hackathon::{{closure}}::{{closure}} (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="261" width="2.6296%" height="15" fill="rgb(221,136,13)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="271.50">la..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="245" width="2.6296%" height="15" fill="rgb(249,199,10)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="255.50">al..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="229" width="2.6296%" height="15" fill="rgb(249,222,13)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="239.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="213" width="2.6296%" height="15" fill="rgb(244,185,38)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="223.50">al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="197" width="2.6296%" height="15" fill="rgb(236,202,9)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="207.50">al..</text></g><g><title>alloc::slice::hack::to_vec (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="181" width="2.6296%" height="15" fill="rgb(250,229,37)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="191.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="165" width="2.6296%" height="15" fill="rgb(206,174,23)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="175.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="149" width="2.6296%" height="15" fill="rgb(211,33,43)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="159.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="133" width="2.6296%" height="15" fill="rgb(245,58,50)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="143.50">co..</text></g><g><title>__memmove_avx_unaligned_erms (2,915,874 samples, 2.63%)</title><rect x="97.3511%" y="117" width="2.6296%" height="15" fill="rgb(244,68,36)" fg:x="107947772" fg:w="2915874"/><text x="97.6011%" y="127.50">__..</text></g><g><title>all (110,885,058 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="110885058"/><text x="0.2500%" y="783.50"></text></g><g><title>perf-exec (21,412 samples, 0.02%)</title><rect x="99.9807%" y="757" width="0.0193%" height="15" fill="rgb(254,30,23)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="767.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="741" width="0.0193%" height="15" fill="rgb(235,160,14)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="751.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="725" width="0.0193%" height="15" fill="rgb(212,155,44)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="735.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="709" width="0.0193%" height="15" fill="rgb(226,2,50)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="719.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="693" width="0.0193%" height="15" fill="rgb(234,177,6)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="703.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="677" width="0.0193%" height="15" fill="rgb(217,24,9)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="687.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="661" width="0.0193%" height="15" fill="rgb(220,13,46)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="671.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="645" width="0.0193%" height="15" fill="rgb(239,221,27)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="655.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="629" width="0.0193%" height="15" fill="rgb(222,198,25)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="639.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="613" width="0.0193%" height="15" fill="rgb(211,99,13)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="623.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="597" width="0.0193%" height="15" fill="rgb(232,111,31)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="607.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="581" width="0.0193%" height="15" fill="rgb(245,82,37)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="591.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="565" width="0.0193%" height="15" fill="rgb(227,149,46)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="575.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="549" width="0.0193%" height="15" fill="rgb(218,36,50)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="559.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="533" width="0.0193%" height="15" fill="rgb(226,80,48)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="543.50"></text></g><g><title>[unknown] (21,412 samples, 0.02%)</title><rect x="99.9807%" y="517" width="0.0193%" height="15" fill="rgb(238,224,15)" fg:x="110863646" fg:w="21412"/><text x="100.2307%" y="527.50"></text></g></svg></svg>